#!/usr/bin/env node
/*/---------------------------------------------------------/*/
/*/ Craydent LLC proxy-v0.1.18                              /*/
/*/ Copyright 2011 (http://craydent.com/about)              /*/
/*/ Dual licensed under the MIT or GPL Version 2 licenses.  /*/
/*/ (http://craydent.com/license)                           /*/
/*/---------------------------------------------------------/*/
/*/---------------------------------------------------------/*/
/* proxy params
	1=>interpreter/node command (not used)
	2=>node file being executed (not used)
	3=>proxy port
	4=>proxy host
	5=>json string or file
*/
require('craydent/noConflict');
require('shelljs/global');
const readline = require('readline');
const fs = require('fs');

var run = $c.yieldable(exec);

if($c.include('../pconfig.json')) {
	return $c.syncroit(function*(){
		yield run(__dirname + "/node_script.sh proxy \"index.js\" " + __dirname.replace('bin','') + ";");
		process.exit();
	});
}

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});
$c.syncroit(function*() {
	var question = $c.yieldable(rl.question, rl), answer,
		yes = {yes: 1, y: 1},
		no = {no: 1, n: 1};



	var port = (process.argv[2] || (yield question('What port should proxy run on? (80): ')) || 80).toString().split(',');
	var host = (process.argv[3] ? (process.argv[3] == "*" ? "" : process.argv[3].toString()) : (yield question('What host can access this proxy? (*): '))).split(',');

	port.map(function(p){ return parseInt(p); });

	var routes, content;
	if (content = process.argv[3]) {
		if (content.indexOf("{") != -1) {
			// this is a file
			content = fs.readFileSync(content, 'utf8');

		}
		routes = $c.tryEval(content,JSON.parse);
		if (!routes) { console.log('there is an issue with the json and cannot be parsed.'); }
	}

	if (!routes) {
		routes = {};
		answer = (yield question('Do you want to configure routes now? (yes): ')) || "yes";
		var domain = "";
		while (answer in yes) {
			domain = (yield question('What is FQDN or IP for this route? '+(domain?'('+domain+')':'')+': ')) || domain;
			var rhost = ((yield question('What host will this route be forwarding to? (localhost): ')) || "localhost").split(',');
			var rport = ((yield question('What port will this route be forwarding to? (80): ')) || "80").split(',');
			var rpathdestination = (yield question('What path will this route be forwarding to? (/): ')) || '/';
			var rpathreq = (yield question('What outfacing path relative to the domain? (/): ')) || '/';

			var enableAuth = (yield question('Do you want to enable HTTP Basic Authentication? (no): ')) in yes,
				auth_username, auth_password;

			if (enableAuth) {
				auth_username = (yield question('What is the username? (admin): ')) || 'admin';
				auth_password = (yield question('What is the password? (admin): ')) || 'admin';
			}
			var headers = {};
			var hasHeaders = (yield question('Are there any headers to overwrite with each request to this route? (no): ')) || "no";
			while (hasHeaders in yes) {
				var hname = yield question('What is the name of the header? ');
				var hval = yield question('What is the value of the header? ');
				headers[hname] = hval;
				hasHeaders = (yield question('Do you want to add more headers? (yes): ')) || "yes";
			}
			var allowed = ((yield question('What hosts can access this route? (*): ')) || "*").split(',');
			var verbs = ((yield question('What methods can be used to access this route? (get,post,put,delete): ')) || "get,post,put,delete").toLowerCase().split(',');

			routes[domain] = routes[domain] || [];
			routes[domain].push({
				host: rhost,
				port: rport,
				verbs: verbs,
				allow: allowed,
				headers: headers,
				path: rpathdestination,
				request_path: rpathreq,
				domain: domain,
				http_auth: enableAuth,
				http_username: auth_username,
				http_password: auth_password
			});

			answer = (yield question('Do you want to configure another route? (yes): ')) || "yes";
		}
	}
	var ncontent = JSON.stringify({host:host,port:port,routes:routes});

	var dirpath = __dirname.replace('/bin','');
	fs.writeFileSync(dirpath + "/pconfig.json",ncontent);
	yield run(__dirname + "/node_script.sh proxy \"index.js\" " + dirpath + "/;");

	console.log("Complete");
	process.exit();
});